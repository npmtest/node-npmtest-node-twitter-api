{"/home/travis/build/npmtest/node-npmtest-node-twitter-api/test.js":"/* istanbul instrument in package npmtest_node_twitter_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-twitter-api/lib.npmtest_node_twitter_api.js":"/* istanbul instrument in package npmtest_node_twitter_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_twitter_api = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_twitter_api = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-twitter-api/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-twitter-api && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_twitter_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_twitter_api\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_twitter_api.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_twitter_api.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_twitter_api.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_twitter_api.__dirname + '/lib.npmtest_node_twitter_api.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-twitter-api/node_modules/node-twitter-api/twitter.js":"\"use strict\";\nvar VERSION = \"1.8.0\",\n\tquerystring = require(\"querystring\"),\n\toauth = require(\"oauth\"),\n\trequest = require(\"request\"),\n\tfs = require(\"fs\");\n\nvar baseUrl = \"https://api.twitter.com/1.1/\";\nvar uploadBaseUrl = \"https://upload.twitter.com/1.1/\";\nvar authUrl = \"https://twitter.com/oauth/authenticate?oauth_token=\";\n\nvar Twitter = function(options) {\n\tif (!(this instanceof Twitter))\n\t\treturn new Twitter(options);\n\n\tthis.consumerKey = options.consumerKey;\n\tthis.consumerSecret = options.consumerSecret;\n\tthis.callback = options.callback;\n\n\tthis.x_auth_access_type = options.x_auth_access_type;\n\n\tthis.oa = new oauth.OAuth(\"https://twitter.com/oauth/request_token\", \"https://twitter.com/oauth/access_token\",\n\t\tthis.consumerKey, this.consumerSecret, \"1.0A\", this.callback, \"HMAC-SHA1\");\n\n\treturn this;\n};\nTwitter.VERSION = VERSION;\n\nTwitter.prototype.getRequestToken = function(callback) {\n\tthis.oa.getOAuthRequestToken({x_auth_access_type: this.x_auth_access_type}, function(error, oauthToken, oauthTokenSecret, results) {\n\t\tif (error) {\n\t\t\tcallback(error);\n\t\t} else {\n\t\t\tcallback(null, oauthToken, oauthTokenSecret, results);\n\t\t}\n\t});\n};\n\nTwitter.prototype.getAuthUrl = function(requestToken, options) {\n\tvar extraArgs = \"\";\n\tif (options && options.force_login) {\n\t\textraArgs += \"&force_login=1\";\n\t}\n\tif (options && options.screen_name) {\n\t\textraArgs += \"&screen_name=\" + options.screen_name;\n\t}\n\treturn authUrl + requestToken + extraArgs;\n};\n\nTwitter.prototype.getAccessToken = function(requestToken, requestTokenSecret, oauth_verifier, callback) {\n\tthis.oa.getOAuthAccessToken(requestToken, requestTokenSecret, oauth_verifier, function(error, oauthAccessToken, oauthAccessTokenSecret, results) {\n\t\tif (error) {\n\t\t\tcallback(error);\n\t\t} else {\n\t\t\tcallback(null, oauthAccessToken, oauthAccessTokenSecret, results);\n\t\t}\n\t});\n};\n\nTwitter.prototype.verifyCredentials = function(accessToken, accessTokenSecret, params, callback) {\n\tvar url = baseUrl + \"account/verify_credentials.json\";\n\tif (typeof params == \"function\") {\n\t\tcallback = params;\n\t} else {\n\t\turl += '?' + querystring.stringify(params);\n\t}\n\tthis.oa.get(url, accessToken, accessTokenSecret, function(error, data, response) {\n\t\tif (error) {\n\t\t\tcallback(error);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t} catch (e) {\n\t\t\t\tcallback(e, data, response);\n\t\t\t}\n\t\t\tcallback(null, parsedData, response);\n\t\t}\n\t});\n};\n\n\n// Timelines\nTwitter.prototype.getTimeline = function(type, params, accessToken, accessTokenSecret, callback) {\n\ttype = type.toLowerCase();\n\n\tvar url;\n\tswitch (type) {\n\t\tcase \"home_timeline\":\n\t\tcase \"home\":\n\t\t\turl = \"home_timeline\";\n\t\t\tbreak;\n\t\tcase \"mentions_timeline\":\n\t\tcase \"mentions\":\n\t\t\turl = \"mentions_timeline\";\n\t\t\tbreak;\n\t\tcase \"user_timeline\":\n\t\tcase \"user\":\n\t\t\tif (!params.user_id && !params.screen_name) {\n\t\t\t\tcallback(\"Always specify either an user_id or screen_name when requesting a user timeline.\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\turl = \"user_timeline\";\n\t\t\tbreak;\n\t\tcase \"retweets_of_me\":\n\t\tcase \"retweets\":\n\t\t\turl = \"retweets_of_me\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tcallback(\"Please specify an existing type.\");\n\t\t\treturn false;\n\t}\n\n\tthis.oa.get(baseUrl + \"statuses/\" + url + \".json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\tif (error) {\n\t\t\tcallback(error);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t} catch (e) {\n\t\t\t\tcallback(e, data, response);\n\t\t\t}\n\t\t\tcallback(null, parsedData, response);\n\t\t}\n\t});\n};\n\n//Streaming\nTwitter.prototype.getStream = function(type, params, accessToken, accessTokenSecret, dataCallback, endCallback) {\n\ttype = type.toLowerCase();\n\n\tvar url, method = \"GET\";\n\tswitch (type) {\n\t\tcase \"userstream\":\n\t\tcase \"user\":\n\t\t\turl = \"https://userstream.twitter.com/1.1/user.json\";\n\t\t\tbreak;\n\t\tcase \"sitestream\":\n\t\tcase \"site\":\n\t\t\turl = \"https://sitestream.twitter.com/1.1/site.json\";\n\t\t\tbreak;\n\t\tcase \"sample\":\n\t\t\turl = \"https://stream.twitter.com/1.1/statuses/sample.json\";\n\t\t\tbreak;\n\t\tcase \"firehose\":\n\t\t\turl = \"https://stream.twitter.com/1.1/statuses/firehose.json\";\n\t\t\tbreak;\n\t\tcase \"filter\":\n\t\t\tmethod = \"POST\";\n\t\t\turl = \"https://stream.twitter.com/1.1/statuses/filter.json\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tvar errorMessage = \"Please specify an existing type.\";\n\t\t\tdataCallback({message: errorMessage, e: new Error(errorMessage)}, null, null, null);\n\t\t\treturn false;\n\t}\n\n\tvar req;\n\tif (method == \"GET\") {\n\t\treq = this.oa.get(url + \"?\" + querystring.stringify(params), accessToken, accessTokenSecret);\n\t} else {\n\t\treq = this.oa.post(url, accessToken, accessTokenSecret, params, null);\n\t}\n\tvar msg = [];\n\treq.addListener(\"response\", function(res) {\n\t\tres.setEncoding(\"utf-8\");\n\t\tres.addListener(\"data\", function(chunk) {\n\t\t\tif (chunk == \"\\r\\n\") {\n\t\t\t\tdataCallback(null, {}, chunk, res);\n\t\t\t\treturn;\n\t\t\t} else if (chunk.substr(chunk.length - 2) == \"\\r\\n\") {\n\t\t\t\tmsg.push(chunk.substr(0, chunk.length - 2));\n\t\t\t\tvar ret = msg.join(\"\");\n\t\t\t\tmsg = [];\n\n\t\t\t\tvar parsedRet;\n\t\t\t\ttry {\n\t\t\t\t\tparsedRet = JSON.parse(ret);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdataCallback({\n\t\t\t\t\t\tmessage: \"Error while parsing Twitter-Response.\",\n\t\t\t\t\t\terror: e\n\t\t\t\t\t}, null, chunk, res);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tdataCallback(null, parsedRet, ret, res);\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tmsg.push(chunk);\n\t\t\t\treturn;\n\t\t\t}\n\t\t});\n\t\tres.addListener(\"end\", function() {\n\t\t\tendCallback(res);\n\t\t});\n\t});\n\treq.end();\n\n\treturn req;\n};\n\n// Tweets\nTwitter.prototype.statuses = function(type, params, accessToken, accessTokenSecret, callback) {\n\tvar url = type.toLowerCase();\n\n\tvar method = \"GET\";\n\tswitch (type) {\n\t\tcase \"retweets\":\n\t\t\turl = \"retweets/\" + params.id;\n\t\t\tdelete params.id;\n\t\t\tbreak;\n\t\tcase \"show\":\n\t\t\turl = \"show/\" + params.id;\n\t\t\tdelete params.id;\n\t\t\tbreak;\n\t\tcase \"lookup\":\n\t\t\turl = \"lookup\";\n\t\t\tmethod = \"POST\";\n\t\t\tbreak;\n\t\tcase \"destroy\":\n\t\t\turl = \"destroy/\" + params.id;\n\t\t\tdelete params.id;\n\t\t\tmethod = \"POST\";\n\t\t\tbreak;\n\t\tcase \"update\":\n\t\t\tmethod = \"POST\";\n\t\t\tbreak;\n\t\tcase \"retweet\":\n\t\t\turl = \"retweet/\" + params.id;\n\t\t\tdelete params.id;\n\t\t\tmethod = \"POST\";\n\t\t\tbreak;\n\t\tcase \"unretweet\":\n\t\t\turl = \"unretweet/\" + params.id;\n\t\t\tdelete params.id;\n\t\t\tmethod = \"POST\";\n\t\t\tbreak;\n\t\tcase \"oembed\":\n\t\t\turl =\"oembed\";\n\t\t\tbreak;\n\t\tcase \"upload_media\":\n\t\t\tthis.uploadMedia(params, accessToken, accessTokenSecret, callback);\n\t\t\treturn;\n\t\tcase \"update_with_media\":\n\t\t\tcallback(\"'update_with_media' type has been removed. Use 'upload_media' instead\");\n\t\t\treturn false;\n\t\tdefault:\n\t\t\tcallback(\"Please specify an existing type.\");\n\t\t\treturn false;\n\t}\n\n\tif (method == \"GET\") {\n\t\tthis.oa.get(baseUrl + \"statuses/\" + url + \".json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response, baseUrl + \"statuses/\" + url + \".json?\" + querystring.stringify(params));\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tthis.oa.post(baseUrl + \"statuses/\" + url + \".json\", accessToken, accessTokenSecret, params, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t}\n};\n\nTwitter.prototype.uploadMedia = function(params, accessToken, accessTokenSecret, callback) {\n\tvar r = request.post({\n\t\turl: uploadBaseUrl + \"media/upload.json\",\n\t\toauth: {\n\t\t\tconsumer_key: this.consumerKey,\n\t\t\tconsumer_secret: this.consumerSecret,\n\t\t\ttoken: accessToken,\n\t\t\ttoken_secret: accessTokenSecret\n\t\t}\n\t}, function(error, response, body) {\n\t\tif (error) {\n\t\t\tcallback(error, body, response, uploadBaseUrl + \"media/upload.json?\" + querystring.stringify(params));\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tvar parsedBody = JSON.parse(body);\n\t\t\t} catch (e) {\n\t\t\t\tcallback(e, body, response);\n\t\t\t}\n\t\t\tcallback(null, parsedBody, response);\n\t\t}\n\t});\n\n\tvar parameter = (params.isBase64) ? \"media_data\" : \"media\";\n\n\t// multipart/form-data\n\tvar form = r.form();\n\tif (fs.existsSync(params.media)) {\n\t\tform.append(parameter, fs.createReadStream(params.media));\n\t} else {\n\t\tform.append(parameter, params.media);\n\t}\n};\n\n/**\n * upload video to twitter\n * @param params\n * @param accessToken\n * @param accessTokenSecret\n * @param callback\n */\nTwitter.prototype.uploadVideo = function (params, accessToken, accessTokenSecret, callback) {\n\tthis.uploadMediaChunked(params, \"video/mp4\", accessToken, accessTokenSecret, callback);\n};\n\nTwitter.prototype.uploadMediaChunked = function (params, media_type, accessToken, accessTokenSecret, callback) {\n\tvar bufferLength = 1000000;\n\tvar theBuffer = new Buffer(bufferLength);\n\tvar offset = 0;\n\tvar segment_index = 0;\n\tvar finished = 0;\n\tvar oauthObj = {\n\t\tconsumer_key: this.consumerKey,\n\t\tconsumer_secret: this.consumerSecret,\n\t\ttoken: accessToken,\n\t\ttoken_secret: accessTokenSecret\n\t};\n\n\tfs.stat(params.media, function (err, stats) {\n\t\tvar formData, finalizeMedia, options;\n\t\tformData = {\n\t\t\tcommand: \"INIT\",\n\t\t\tmedia_type: media_type,\n\t\t\ttotal_bytes: stats.size\n\t\t};\n\t\toptions = {\n\t\t\turl: uploadBaseUrl + \"media/upload.json\",\n\t\t\toauth: oauthObj,\n\t\t\tformData: formData\n\t\t};\n\n\t\tfinalizeMedia = function (media_id) {\n\t\t\treturn function (err, response, body) {\n\n\t\t\t\tfinished++;\n\t\t\t\tif (finished === segment_index) {\n\n\t\t\t\t\toptions.formData = {\n\t\t\t\t\t\tcommand: 'FINALIZE',\n\t\t\t\t\t\tmedia_id: media_id\n\t\t\t\t\t};\n\t\t\t\t\trequest.post(options, function (err, response, body) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn cb(err, body);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tvar parsedBody = JSON.parse(body);\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\treturn callback(e, body);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn callback(null, parsedBody);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t\trequest.post(options, function (err, response, body) {\n\t\t\tvar media_id;\n\t\t\tmedia_id = JSON.parse(body).media_id_string;\n\t\t\tfs.open(params.media, 'r', function (err, fd) {\n\t\t\t\tvar bytesRead, data;\n\n\t\t\t\twhile (offset < stats.size) {\n\n\t\t\t\t\tbytesRead = fs.readSync(fd, theBuffer, 0, bufferLength, null);\n\t\t\t\t\tdata = bytesRead < bufferLength ? theBuffer.slice(0, bytesRead) : theBuffer;\n\t\t\t\t\toptions.formData = {\n\t\t\t\t\t\tcommand: \"APPEND\",\n\t\t\t\t\t\tmedia_id: media_id,\n\t\t\t\t\t\tsegment_index: segment_index,\n\t\t\t\t\t\tmedia_data: data.toString('base64')\n\t\t\t\t\t};\n\t\t\t\t\trequest.post(options, finalizeMedia(media_id));\n\t\t\t\t\toffset += bufferLength;\n\t\t\t\t\tsegment_index++\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t});\n};\n\n\n\n// Search\nTwitter.prototype.search = function(params, accessToken, accessTokenSecret, callback) {\n\tthis.oa.get(baseUrl + \"search/tweets.json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\tif (error) {\n\t\t\tcallback(error, data, response, baseUrl + \"search/tweets.json?\" + querystring.stringify(params));\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t} catch (e) {\n\t\t\t\tcallback(e, data, response);\n\t\t\t}\n\t\t\tcallback(null, parsedData, response);\n\t\t}\n\t});\n};\n\n// Users\nTwitter.prototype.users = function(type, params, accessToken, accessTokenSecret, callback) {\n\tvar url = type.toLowerCase();\n\n\tvar method = \"GET\"; // show, search, contributees, contributors\n\tif (url == \"lookup\") method = \"POST\";\n\n\n\tif (method == \"GET\") {\n\t\tthis.oa.get(baseUrl + \"users/\" + url + \".json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response, baseUrl + \"users/\" + url + \".json?\" + querystring.stringify(params));\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tthis.oa.post(baseUrl + \"users/\" + url + \".json\", accessToken, accessTokenSecret, params, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t}\n\n};\n\n\n// Friends (similiar to Followers)\nTwitter.prototype.friends = function(type, params, accessToken, accessTokenSecret, callback) {\n\tvar url = type.toLowerCase(); // ids or list\n\n\tthis.oa.get(baseUrl + \"friends/\" + url + \".json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\tif (error) {\n\t\t\tcallback(error, data, response, baseUrl + \"friends/\" + url + \".json?\" + querystring.stringify(params));\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t} catch (e) {\n\t\t\t\tcallback(e, data, response);\n\t\t\t}\n\t\t\tcallback(null, parsedData, response);\n\t\t}\n\t});\n};\n\n// Followers (similiar to Friends)\nTwitter.prototype.followers = function(type, params, accessToken, accessTokenSecret, callback) {\n\tvar url = type.toLowerCase(); // ids or list\n\n\tthis.oa.get(baseUrl + \"followers/\" + url + \".json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\tif (error) {\n\t\t\tcallback(error, data, response, baseUrl + \"folllowers/\" + url + \".json?\" + querystring.stringify(params));\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t} catch (e) {\n\t\t\t\tcallback(e, data, response);\n\t\t\t}\n\t\t\tcallback(null, parsedData, response);\n\t\t}\n\t});\n};\n\n// Friendships\nTwitter.prototype.friendships = function(type, params, accessToken, accessTokenSecret, callback) {\n\tvar url = type.toLowerCase(); // ids or list\n\tvar method = \"GET\";\n\n\t// define endpoints that use POST\n\tswitch (type) {\n\t\tcase \"create\":\n\t\tcase \"destroy\":\n\t\tcase \"update\":\n\t\t\tmethod = \"POST\";\n\t}\n\n\n\tif (method == \"GET\") {\n\t\tthis.oa.get(baseUrl + \"friendships/\" + url + \".json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response, baseUrl + \"friendships/\" + url + \".json?\" + querystring.stringify(params));\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tthis.oa.post(baseUrl + \"friendships/\" + url + \".json\", accessToken, accessTokenSecret, params, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t}\n};\n\nTwitter.prototype.updateProfileImage = function(params, accessToken, accessTokenSecret, callback) {\n\n\tif (!fs.existsSync(params[\"image\"])) throw new Error(\"no image\");\n\n\tvar r = request.post({\n\t\turl: baseUrl + \"account/update_profile_image.json\",\n\t\toauth: {\n\t\t\tconsumer_key: this.consumerKey,\n\t\t\tconsumer_secret: this.consumerSecret,\n\t\t\ttoken: accessToken,\n\t\t\ttoken_secret: accessTokenSecret\n\t\t}\n\t}, function(error, response, body) {\n\t\tif (error) {\n\t\t\tcallback(error, body, response, baseUrl + \"account/update_profile_image.json?\" + querystring.stringify(params));\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tvar parsedBody = JSON.parse(body);\n\t\t\t} catch (e) {\n\t\t\t\tcallback(e, body, response);\n\t\t\t}\n\t\t\tcallback(null, parsedBody, response);\n\t\t}\n\t});\n\n\t// multipart/form-data\n\tvar form = r.form();\n\tfor (var key in params) {\n\t\tif (key != \"image\") {\n\t\t\tform.append(key, params[key]);\n\t\t}\n\t}\n\n\tform.append(\"image\", fs.createReadStream(params[\"image\"]));\n\n};\n\n// Account\nTwitter.prototype.account = function(type, params, accessToken, accessTokenSecret, callback) {\n\tvar url = type.toLowerCase();\n\n\tvar method = \"POST\";\n\tswitch (url) {\n\t\tcase \"settings\":\n\t\t\tif (Object.keys(params).length === 0) {\n\t\t\t\tmethod = \"GET\";\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"verify_credentials\":\n\t\t\tmethod = \"GET\";\n\t\t\tbreak;\n\t\tcase \"update_profile_image\":\n\t\t\tthis.updateProfileImage(params, accessToken, accessTokenSecret, callback);\n\t\t\treturn;\n\t}\n\n\tif (method == \"GET\") {\n\t\tthis.oa.get(baseUrl + \"account/\" + url + \".json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response, baseUrl + \"account/\" + url + \".json?\" + querystring.stringify(params));\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tthis.oa.post(baseUrl + \"account/\" + url + \".json\", accessToken, accessTokenSecret, params, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t}\n};\n\n// Blocks\nTwitter.prototype.blocks = function(type, params, accessToken, accessTokenSecret, callback) {\n\tvar url = type.toLowerCase();\n\n\tvar method = \"GET\";\n\tswitch (url) {\n\t\tcase \"create\":\n\t\tcase \"destroy\":\n\t\t\tmethod = \"POST\";\n\t\t\tbreak;\n\t}\n\n\tif (method == \"GET\") {\n\t\tthis.oa.get(baseUrl + \"blocks/\" + url + \".json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response, baseUrl + \"blocks/\" + url + \".json?\" + querystring.stringify(params));\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tthis.oa.post(baseUrl + \"blocks/\" + url + \".json\", accessToken, accessTokenSecret, params, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t}\n};\n\n// Mutes\nTwitter.prototype.mutes = function(type, params, accessToken, accessTokenSecret, callback) {\n\tvar url = type.toLowerCase();\n\n\tvar method = \"GET\";\n\tswitch (url) {\n\t\tcase \"users/create\":\n\t\tcase \"users/destroy\":\n\t\t\tmethod = \"POST\";\n\t\t\tbreak;\n\t}\n\n\tif (method == \"GET\") {\n\t\tthis.oa.get(baseUrl + \"mutes/\" + url + \".json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response, baseUrl + \"mutes/\" + url + \".json?\" + querystring.stringify(params));\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tthis.oa.post(baseUrl + \"mutes/\" + url + \".json\", accessToken, accessTokenSecret, params, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t}\n};\n\n// Users\nTwitter.prototype.users = function(type, params, accessToken, accessTokenSecret, callback) {\n\tvar url = type.toLowerCase();\n\n\tthis.oa.get(baseUrl + \"users/\" + url + \".json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\tif (error) {\n\t\t\tcallback(error, data, response, baseUrl + \"users/\" + url + \".json?\" + querystring.stringify(params));\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t} catch (e) {\n\t\t\t\tcallback(e, data, response);\n\t\t\t}\n\t\t\tcallback(null, parsedData, response);\n\t\t}\n\t});\n};\n\n// Suggestions\nTwitter.prototype.suggestions = function(type, params, accessToken, accessTokenSecret, callback) {\n\tvar url = type.toLowerCase();\n\tvar method = \"GET\";\n\n\tswitch (url) {\n\t\tcase \"suggestions\":\n\t\tcase \"\":\n\t\t\turl = \"\";\n\t\t\tbreak;\n\t\tcase \"members\":\n\t\t\turl = params.slug + \"/members\";\n\t\t\tdelete params.slug;\n\t\t\tbreak;\n\t\tcase \"slug\":\n\t\t\turl = params.slug;\n\t\t\tdelete params.slug;\n\t\t\tbreak;\n\t}\n\n\tthis.oa.get(baseUrl + \"users/suggestions\" + ((url) ? \"/\" + url : \"\") + \".json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\tif (error) {\n\t\t\tcallback(error, data, response, baseUrl + \"users/suggestions\" + ((url) ? \"/\" + url : \"\") + \".json?\" + querystring.stringify(params));\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t} catch (e) {\n\t\t\t\tcallback(e, data, response);\n\t\t\t}\n\t\t\tcallback(null, parsedData, response);\n\t\t}\n\t});\n};\n\n// Favorites\nTwitter.prototype.favorites = function(type, params, accessToken, accessTokenSecret, callback) {\n\tvar url = type.toLowerCase();\n\tvar method = \"GET\";\n\n\tswitch (url) {\n\t\tcase \"destroy\":\n\t\tcase \"create\":\n\t\t\tmethod = \"POST\";\n\t}\n\n\tif (method == \"GET\") {\n\t\tthis.oa.get(baseUrl + \"favorites/\" + url + \".json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response, baseUrl + \"favorites/\" + url + \".json?\" + querystring.stringify(params));\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tthis.oa.post(baseUrl + \"favorites/\" + url + \".json\", accessToken, accessTokenSecret, params, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t}\n};\n\n// Direct Messages\nTwitter.prototype.direct_messages = function(type, params, accessToken, accessTokenSecret, callback) {\n\tvar url = type.toLowerCase();\n\tvar method = \"GET\";\n\n\n\tswitch (url) {\n\t\tcase \"direct_messages\":\n\t\tcase \"\":\n\t\t\turl = \"\";\n\t\t\tbreak;\n\t\tcase \"destroy\":\n\t\tcase \"new\":\n\t\t\tmethod = \"POST\";\n\t}\n\n\tif (method == \"GET\") {\n\t\tthis.oa.get(baseUrl + \"direct_messages\" + ((url) ? \"/\" + url : \"\") + \".json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response, baseUrl + \"direct_messages\" + ((url) ? \"/\" + url : \"\") + \".json?\" + querystring.stringify(params));\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tthis.oa.post(baseUrl + \"direct_messages/\" + url + \".json\", accessToken, accessTokenSecret, params, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t}\n};\n\n// Lists\nTwitter.prototype.lists = function(type, params, accessToken, accessTokenSecret, callback) {\n\tvar url = type.toLowerCase();\n\tvar method = \"GET\";\n\n\tswitch (url) {\n\t\tcase \"members/destroy\":\n\t\tcase \"members/destroy_all\":\n\t\tcase \"members/create\":\n\t\tcase \"members/create_all\":\n\t\tcase \"subscribers/create\":\n\t\tcase \"subscribers/destroy\":\n\t\tcase \"destroy\":\n\t\tcase \"update\":\n\t\tcase \"create\":\n\t\t\tmethod = \"POST\";\n\t}\n\n\tif (method == \"GET\") {\n\t\tthis.oa.get(baseUrl + \"lists/\" + url + \".json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response, baseUrl + \"lists/\" + url + \".json?\" + querystring.stringify(params));\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tthis.oa.post(baseUrl + \"lists/\" + url + \".json\", accessToken, accessTokenSecret, params, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t}\n};\n\n\n// Saved Searches\nTwitter.prototype.savedSearches = function(type, params, accessToken, accessTokenSecret, callback) {\n\tvar url = type.toLowerCase();\n\tvar method = \"GET\";\n\n\tswitch (url) {\n\t\tcase \"create\":\n\t\t\tmethod = \"POST\";\n\t\t\tbreak;\n\t\tcase \"show\":\n\t\t\turl = \"show/\" + params.id;\n\t\t\tdelete params.id;\n\t\t\tbreak;\n\t\tcase \"destroy\":\n\t\t\turl = \"destroy/\" + params.id;\n\t\t\tdelete params.id;\n\t\t\tmethod = \"POST\";\n\t\t\tbreak;\n\t}\n\n\tif (method == \"GET\") {\n\t\tthis.oa.get(baseUrl + \"saved_searches/\" + url + \".json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response, baseUrl + \"saved_searches/\" + url + \".json?\" + querystring.stringify(params));\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tthis.oa.post(baseUrl + \"saved_searches/\" + url + \".json\", accessToken, accessTokenSecret, params, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t}\n};\n\n// Geo\nTwitter.prototype.geo = function(type, params, accessToken, accessTokenSecret, callback) {\n\tvar url = type.toLowerCase();\n\tvar method = \"GET\";\n\n\tswitch (url) {\n\t\tcase \"place\":\n\t\t\tmethod = \"POST\";\n\t\t\tbreak;\n\t\tcase \"id\":\n\t\t\turl = \"id/\" + params.place_id;\n\t\t\tdelete params.place_id;\n\t\t\tbreak;\n\t}\n\n\tif (method == \"GET\") {\n\t\tthis.oa.get(baseUrl + \"geo/\" + url + \".json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response, baseUrl + \"geo/\" + url + \".json?\" + querystring.stringify(params));\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tthis.oa.post(baseUrl + \"geo/\" + url + \".json\", accessToken, accessTokenSecret, params, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t}\n};\n\n// Trends\nTwitter.prototype.trends = function(type, params, accessToken, accessTokenSecret, callback) {\n\tvar url = type.toLowerCase();\n\n\tthis.oa.get(baseUrl + \"trends/\" + url + \".json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\tif (error) {\n\t\t\tcallback(error, data, response, baseUrl + \"trends/\" + url + \".json?\" + querystring.stringify(params));\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t} catch (e) {\n\t\t\t\tcallback(e, data, response);\n\t\t\t}\n\t\t\tcallback(null, parsedData, response);\n\t\t}\n\t});\n};\n\n// Spam Reporting\nTwitter.prototype.report_spam = function(type, params, accessToken, accessTokenSecret, callback) {\n\tvar url = type.toLowerCase();\n\n\tthis.oa.post(baseUrl + \"users/report_spam.json\", accessToken, accessTokenSecret, params, function(error, data, response) {\n\t\tif (error) {\n\t\t\tcallback(error, data, response);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t} catch (e) {\n\t\t\t\tcallback(e, data, response);\n\t\t\t}\n\t\t\tcallback(null, parsedData, response);\n\t\t}\n\t});\n};\n\n// OAuth\nTwitter.prototype.oauth = function(type, params, accessToken, accessTokenSecret, callback) {\n\tvar url = type.toLowerCase();\n\tvar method = \"GET\";\n\n\tswitch (url) {\n\t\tcase \"access_token\":\n\t\tcase \"request_token\":\n\t\t\tmethod = \"POST\";\n\t\t\turl = \"oauth/\" + url;\n\t\t\tbreak;\n\t\tcase \"token\":\n\t\tcase \"invalidate_token\":\n\t\t\tmethod = \"POST\";\n\t\t\turl = \"oauth2/\" + url;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\turl = \"oauth/\" + url;\n\t\t\tbreak;\n\t}\n\n\tif (method == \"GET\") {\n\t\tthis.oa.get(baseUrl + url + \".json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response, baseUrl + \"geo/\" + url + \".json?\" + querystring.stringify(params));\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tthis.oa.post(baseUrl + url + \".json\", accessToken, accessTokenSecret, params, function(error, data, response) {\n\t\t\tif (error) {\n\t\t\t\tcallback(error, data, response);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e, data, response);\n\t\t\t\t}\n\t\t\t\tcallback(null, parsedData, response);\n\t\t\t}\n\t\t});\n\t}\n};\n\n// Help\nTwitter.prototype.help = function(type, params, accessToken, accessTokenSecret, callback) {\n\tvar url = type.toLowerCase();\n\n\tthis.oa.get(baseUrl + \"help/\" + url + \".json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\tif (error) {\n\t\t\tcallback(error, data, response, baseUrl + \"help/\" + url + \".json?\" + querystring.stringify(params));\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t} catch (e) {\n\t\t\t\tcallback(e, data, response);\n\t\t\t}\n\t\t\tcallback(null, parsedData, response);\n\t\t}\n\t});\n};\n\n// Rate Limit Status\nTwitter.prototype.rateLimitStatus = function(params, accessToken, accessTokenSecret, callback) {\n\tthis.oa.get(baseUrl + \"application/rate_limit_status.json?\" + querystring.stringify(params), accessToken, accessTokenSecret, function(error, data, response) {\n\t\tif (error) {\n\t\t\tcallback(error, data, response, baseUrl + \"application/rate_limit_status.json?\" + querystring.stringify(params));\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tvar parsedData = JSON.parse(data);\n\t\t\t} catch (e) {\n\t\t\t\tcallback(e, data, response);\n\t\t\t}\n\t\t\tcallback(null, parsedData, response);\n\t\t}\n\t});\n};\n\nmodule.exports = Twitter;\n"}